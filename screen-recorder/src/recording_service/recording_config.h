#ifndef PDS_SCREEN_RECORDING_RECORDINGCONFIG_H
#define PDS_SCREEN_RECORDING_RECORDINGCONFIG_H

#include <iostream>
#include <map>
#include <optional>
#include <queue>
#include <string>
#include <thread>

class RecordingConfig {
    // The deviceAddresses select the input video and audio device to use for recording.
    // The accepted device address format is: "{deviceID}:{url}"
    // Examples:
    //   - MacOS
    //       videoAddress:"avfoundation:1"
    //       audioAddress:"avfoundation:1"
    //   - Linux
    //       videoAddress:"x11grab:...."
    //       audioAddress:"pulse:....."
    //   - Windows
    //       videoAddress:"dshow:...."
    //       audioAddress:"dshow:...."
    std::string videoAddress;
    std::string audioAddress;

    // Selects the output folder in which the recording file will be saved
    std::string outputDir;

    // Selects the capture region to use for recording.
    // If omitted the whole screen will be recorded.
    // The accepted format is: tuple(x,y,width,height) from top left
    std::optional<std::tuple<int, int, int, int>> captureRegion;

    // Selects the output resolution to use for recording.
    // The resolution should be chosen between the list generated by the getOutputResolutionsChoices() method.
    // If omitted the input resolution will be used.
    // The accepted format is: tuple(width,height,scalingFactor)
    std::optional<std::tuple<int, int, double>> outputResolution;

    // Selects the framerate to use for recording.
    int framerate = 30;

    // Allow the user to choose if the internal control thread must be used. This allows for easy usage in standalone
    // terminal applications.
    // It must be disabled for custom thread management (e.g. gui applications).
    bool useControlThread = true;

public:
    [[nodiscard]] const std::string &getVideoAddress() const;

    void setVideoAddress(const std::string &address);

    [[nodiscard]] const std::string &getAudioAddress() const;

    void setAudioAddress(const std::string &address);

    void disableAudio();

    [[nodiscard]] const std::string &getOutputDir() const;

    void setOutputDir(const std::string &filename);

    [[nodiscard]] std::string getOutputPath() const;

    [[nodiscard]] const std::optional<std::tuple<int, int, int, int>> &getCaptureRegion() const;

    void setCaptureRegion(int x, int y, int width, int height);

    void resetCaptureRegion();

    static std::vector<std::tuple<int, int, double>> getOutputResolutionsChoices(int inputWidth, int inputHeight);

    [[nodiscard]] const std::optional<std::tuple<int, int, double>> &getOutputResolution() const;

    void setOutputResolution(std::tuple<int, int, double> resolution);

    [[nodiscard]] int getFramerate() const;

    void setFramerate(int framerate);

    [[nodiscard]] bool isUseControlThread() const;

    void setUseControlThread(bool enabled);
};

#endif  // PDS_SCREEN_RECORDING_RECORDINGCONFIG_H
